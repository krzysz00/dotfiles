;;;; My .emacs

;;*custom*
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-master t t)
 '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Evince") (output-html "xdg-open"))))
 '(android-mode-sdk-dir "/home/krzys/progs/android/android")
 '(c-basic-offset 4)
 '(canlock-password "373e129cafb77ade03ef1a7c57a3321b8966c25b")
 '(erc-modules (quote (autojoin button completion dcc fill irccontrols log match menu move-to-prompt netsplit noncommands readonly ring smiley sound stamp track)))
 '(erc-nick "krzysz00")
 '(erc-nick-uniquifier "_")
 '(erc-prompt-for-password t)
 '(erc-user-full-name "Krzysztof Drewniak")
 '(focus-follows-mouse t)
 '(fuel-factor-root-dir "/home/krzys/progs/factor/")
 '(haskell-mode-hook (quote (turn-on-haskell-doc turn-on-haskell-indentation (lambda nil (ghc-init) (flymake-mode)))))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(j-path "/home/krzys/progs/j801/bin")
 '(mouse-autoselect-window t)
 '(scss-compile-at-save nil)
 '(tab-width 4)
 '(tool-bar-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit t :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 158 :width normal :foundry "unknown" :family "Inconsolata")))))
;;^custom^

;;*c-programing-tricks*
(require 'cc-mode)
(setq font-lock-maximum-decoration t)
(add-hook 'cc-mode-hook '(lambda () (flyspell-prog-mode 1)))
(define-key c-mode-map "\C-cc" 'compile)
;;^c-programing-tricks^

;;*spelling and keybinds*
(setq-default ispell-program-name "aspell")
(add-hook 'text-mode-hook '(lambda () (flyspell-mode 1)))
(add-hook 'org-mode-hook '(lambda () (flyspell-mode 1)))
(add-hook 'text-mode-hook '(lambda ()
  (define-key text-mode-map "\C-ci" 'ispell-buffer)
  (define-key text-mode-map "\C-cw" 'ispell-word)
  (define-key text-mode-map "\C-cd" 'artist-mode)))
(setq sentence-end-double-space nil)
;;^spelling and keybinds^

;;*printing*
(setq ps-font-size '14)
(setq ps-font-family 'Times)
;;^printing^

;;*color-theme*
;(require 'color-theme)
(add-to-list 'custom-theme-load-path "/home/krzys/.emacs.d/emacs-color-theme-solarized/")
;(require 'color-theme-solarized)

(defun solarized-dark ()
  (interactive)
  (load-theme 'solarized-dark t))

(defun solarized-light ()
  (interactive)
  (load-theme 'solarized-light t))
;;^color-theme^

;;*erc tweaks*
(setq erc-log-channels-directory "~/Documents/irc-logs/")
(setq erc-save-buffer-on-part t)
;;(setq erc-log-insert-log-on-open t)
;;^erc-tweaks^

;;*set xelatex mode in tex/latex*
;;(add-hook 'LaTeX-mode-hook 
;;	  (lambda()
;;	    (add-to-list 'TeX-command-list 
;;			 '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
;;	    (setq TeX-command-default "XeLaTeX")))
(setq TeX-engine 'xetex)
(setq TeX-PDF-mode t)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-master t)
;;^xelatex^

(server-start) ;;*emacsclient^

;;*packages*
(setq package-list '(j-mode android-mode fuel coffee-mode scss-mode slime))

(package-initialize)

(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))

(or (file-exists-p package-user-dir)
    (package-refresh-contents))

(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
;;^packages^

;;*slime*
(set-language-environment "UTF-8")
(setq slime-net-coding-system 'utf-8-unix)
(require 'slime-autoloads)
(setq slime-path (file-name-directory (locate-library "slime")))
(setq slime-backend (expand-file-name "swank-loader.lisp" slime-path))
(setq slime-lisp-implementations
     '((sbcl ("sbcl" "--core" "/home/krzys/prog-local/sbcl.core-for-slime")) (clisp ("/usr/bin/clisp"))))
(slime-setup '(slime-fancy))
;;^slime^
